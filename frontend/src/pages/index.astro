---
import Layout from '../layouts/Layout.astro';
---

<Layout title="catw">
  <div class="px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Dashboard</h1>
      <p class="mt-2 text-gray-600">Bienvenido a Twitter Archiver. Organiza y categoriza tus tweets guardados.</p>
    </div>

    <!-- Stats Grid -->
    <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
      <!-- Total Tweets -->
      <div class="card">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-twitter-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Total Tweets</p>
            <p class="text-2xl font-semibold text-gray-900" id="totalTweets">
              <span class="loading-spinner" id="totalTweetsSpinner" style="display: none;">
                <svg class="animate-spin h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
              <span id="totalTweetsValue">-</span>
            </p>
          </div>
        </div>
      </div>

      <!-- Categorías -->
      <div class="card">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Categorías</p>
            <p class="text-2xl font-semibold text-gray-900" id="totalCategories">
              <span class="loading-spinner" id="totalCategoriesSpinner" style="display: none;">
                <svg class="animate-spin h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
              <span id="totalCategoriesValue">-</span>
            </p>
          </div>
        </div>
      </div>

      <!-- Última Sincronización -->
      <div class="card">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Última Sincronización</p>
            <p class="text-2xl font-semibold text-gray-900" id="lastSync">
              <span class="loading-spinner" id="lastSyncSpinner" style="display: none;">
                <svg class="animate-spin h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
              <span id="lastSyncValue">-</span>
            </p>
          </div>
        </div>
      </div>

      <!-- Tweets Nuevos -->
      <div class="card">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500">Tweets Esta Semana</p>
            <p class="text-2xl font-semibold text-gray-900" id="newTweets">
              <span class="loading-spinner" id="newTweetsSpinner" style="display: none;">
                <svg class="animate-spin h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
              <span id="newTweetsValue">-</span>
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-2 mb-8">
      <!-- Sincronizar -->
      <div class="card">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Sincronizar Tweets</h3>
        <p class="text-gray-600 mb-4">Usa la extensión de Chrome para obtener tus tweets guardados. <span class="text-sm text-blue-600">Instala la extensión y navega a twitter.com/i/bookmarks para comenzar.</span></p>
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 class="font-medium text-blue-900 mb-2">Instrucciones:</h4>
          <ol class="text-sm text-blue-800 space-y-1">
            <li>1. <a href="/extension" class="underline font-medium">Instala la extensión de Chrome</a></li>
            <li>2. Ve a <a href="https://twitter.com/i/bookmarks" target="_blank" class="underline">twitter.com/i/bookmarks</a></li>
            <li>3. Haz scroll para cargar tweets</li>
            <li>4. Haz clic en "Enviar a Backend" en la extensión</li>
          </ol>
        </div>
      </div>

      <!-- Ver Tweets -->
      <div class="card">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Ver Tweets</h3>
        <p class="text-gray-600 mb-4">Explora y organiza todos tus tweets guardados por categorías.</p>
        <a href="/tweets" class="btn-secondary">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
          Ver Tweets
        </a>
      </div>
    </div>

    <!-- Recent Tweets -->
    <div class="card">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Tweets Recientes</h3>
      <div id="recentTweets" class="space-y-4">
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="mt-2 text-gray-500">No hay tweets para mostrar</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // API base URL
  const API_BASE = 'http://127.0.0.1:3001';
  
  // Check authentication status
  async function checkAuth() {
    try {
      console.log('checkAuth');
      const token = localStorage.getItem('authToken');
      if (!token) {
        // Show login button
        const loginBtn = document.getElementById('loginBtn') as HTMLElement;
        if (loginBtn) loginBtn.style.display = 'block';
        return false;
      }
      
      // Verify token
      const response = await fetch(`${API_BASE}/api/v1/user/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const loginBtn = document.getElementById('loginBtn') as HTMLElement;
        if (loginBtn) loginBtn.style.display = 'none';
        return true;
      } else {
        localStorage.removeItem('authToken');
        const loginBtn = document.getElementById('loginBtn') as HTMLElement;
        if (loginBtn) loginBtn.style.display = 'block';
        return false;
      }
    } catch (error) {
      console.error('Error checking auth:', error);
      return false;
    }
  }
  
  // Show loading state for stats
  function showStatsLoading() {
    const totalTweetsSpinner = document.getElementById('totalTweetsSpinner') as HTMLElement;
    const totalCategoriesSpinner = document.getElementById('totalCategoriesSpinner') as HTMLElement;
    const lastSyncSpinner = document.getElementById('lastSyncSpinner') as HTMLElement;
    const newTweetsSpinner = document.getElementById('newTweetsSpinner') as HTMLElement;
    
    const totalTweetsValue = document.getElementById('totalTweetsValue') as HTMLElement;
    const totalCategoriesValue = document.getElementById('totalCategoriesValue') as HTMLElement;
    const lastSyncValue = document.getElementById('lastSyncValue') as HTMLElement;
    const newTweetsValue = document.getElementById('newTweetsValue') as HTMLElement;
    
    if (totalTweetsSpinner) totalTweetsSpinner.style.display = 'inline-block';
    if (totalCategoriesSpinner) totalCategoriesSpinner.style.display = 'inline-block';
    if (lastSyncSpinner) lastSyncSpinner.style.display = 'inline-block';
    if (newTweetsSpinner) newTweetsSpinner.style.display = 'inline-block';
    
    if (totalTweetsValue) totalTweetsValue.textContent = '';
    if (totalCategoriesValue) totalCategoriesValue.textContent = '';
    if (lastSyncValue) lastSyncValue.textContent = '';
    if (newTweetsValue) newTweetsValue.textContent = '';
  }
  
  // Hide loading state for stats
  function hideStatsLoading() {
    const totalTweetsSpinner = document.getElementById('totalTweetsSpinner') as HTMLElement;
    const totalCategoriesSpinner = document.getElementById('totalCategoriesSpinner') as HTMLElement;
    const lastSyncSpinner = document.getElementById('lastSyncSpinner') as HTMLElement;
    const newTweetsSpinner = document.getElementById('newTweetsSpinner') as HTMLElement;
    
    if (totalTweetsSpinner) totalTweetsSpinner.style.display = 'none';
    if (totalCategoriesSpinner) totalCategoriesSpinner.style.display = 'none';
    if (lastSyncSpinner) lastSyncSpinner.style.display = 'none';
    if (newTweetsSpinner) newTweetsSpinner.style.display = 'none';
  }

  // Load dashboard data
  async function loadDashboardData() {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    // Show loading state
    showStatsLoading();
    
    try {
      // Load stats
      const statsResponse = await fetch(`${API_BASE}/api/v1/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        const stats = statsData.basic; // Acceder a la estructura correcta
        
        // Hide loading and show data
        hideStatsLoading();
        
        const totalTweetsValue = document.getElementById('totalTweetsValue') as HTMLElement;
        const totalCategoriesValue = document.getElementById('totalCategoriesValue') as HTMLElement;
        const newTweetsValue = document.getElementById('newTweetsValue') as HTMLElement;
        const lastSyncValue = document.getElementById('lastSyncValue') as HTMLElement;
        
        if (totalTweetsValue) totalTweetsValue.textContent = (stats.totalTweets || 0).toString();
        if (totalCategoriesValue) totalCategoriesValue.textContent = (stats.totalCategories || 0).toString();
        
        // Calcular tweets nuevos de la última semana
        if (newTweetsValue) newTweetsValue.textContent = (stats.tweetsThisWeek || 0).toString();
        
        // Mostrar última sincronización
        if (stats.lastSync) {
          const lastSyncDate = new Date(stats.lastSync);
          const now = new Date();
          const diffInHours = Math.floor((now.getTime() - lastSyncDate.getTime()) / (1000 * 60 * 60));
          
          if (diffInHours < 1) {
            if (lastSyncValue) lastSyncValue.textContent = 'Hace menos de 1 hora';
          } else if (diffInHours < 24) {
            if (lastSyncValue) lastSyncValue.textContent = `Hace ${diffInHours} horas`;
          } else {
            const diffInDays = Math.floor(diffInHours / 24);
            if (lastSyncValue) lastSyncValue.textContent = `Hace ${diffInDays} días`;
          }
        } else {
          if (lastSyncValue) lastSyncValue.textContent = 'Nunca';
        }
      } else {
        hideStatsLoading();
        // Mostrar mensaje de error en las estadísticas
        const totalTweetsValue = document.getElementById('totalTweetsValue') as HTMLElement;
        const totalCategoriesValue = document.getElementById('totalCategoriesValue') as HTMLElement;
        const newTweetsValue = document.getElementById('newTweetsValue') as HTMLElement;
        const lastSyncValue = document.getElementById('lastSyncValue') as HTMLElement;
        
        if (totalTweetsValue) totalTweetsValue.textContent = 'Error';
        if (totalCategoriesValue) totalCategoriesValue.textContent = 'Error';
        if (newTweetsValue) newTweetsValue.textContent = 'Error';
        if (lastSyncValue) lastSyncValue.textContent = 'Error';
      }
      
      // Load recent tweets
      const tweetsResponse = await fetch(`${API_BASE}/api/v1/tweets?limit=5&sortBy=bookmarkedAt&sortOrder=desc`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (tweetsResponse.ok) {
        const data = await tweetsResponse.json();
        displayRecentTweets(data.tweets);
      }
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      hideStatsLoading();
      // Mostrar mensaje de error en las estadísticas
      const totalTweetsValue = document.getElementById('totalTweetsValue') as HTMLElement;
      const totalCategoriesValue = document.getElementById('totalCategoriesValue') as HTMLElement;
      const newTweetsValue = document.getElementById('newTweetsValue') as HTMLElement;
      const lastSyncValue = document.getElementById('lastSyncValue') as HTMLElement;
      
      if (totalTweetsValue) totalTweetsValue.textContent = 'Error';
      if (totalCategoriesValue) totalCategoriesValue.textContent = 'Error';
      if (newTweetsValue) newTweetsValue.textContent = 'Error';
      if (lastSyncValue) lastSyncValue.textContent = 'Error';
    }
  }
  
  // Display recent tweets
  function displayRecentTweets(tweets: any[]) {
    const container = document.getElementById('recentTweets');
    if (!container) return;
    
    if (!tweets || tweets.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="mt-2 text-gray-500">No hay tweets para mostrar</p>
          <p class="text-sm text-gray-400 mt-1">Usa la extensión para sincronizar tus tweets guardados</p>
        </div>
      `;
      return;
    }
    
    container.innerHTML = tweets.map((tweet: any) => {
      // Formatear fecha relativa
      const tweetDate = new Date(tweet.createdAtTwitter);
      const now = new Date();
      const diffInHours = Math.floor((now.getTime() - tweetDate.getTime()) / (1000 * 60 * 60));
      let timeAgo;
      
      if (diffInHours < 1) {
        timeAgo = 'Hace menos de 1 hora';
      } else if (diffInHours < 24) {
        timeAgo = `Hace ${diffInHours} horas`;
      } else {
        const diffInDays = Math.floor(diffInHours / 24);
        timeAgo = `Hace ${diffInDays} días`;
      }
      
      // Mostrar categorías si existen
      const categoriesHtml = tweet.categories && tweet.categories.length > 0 
        ? tweet.categories.map((cat: any) => 
            `<span class="badge ${cat.isPrimary ? 'badge-primary' : 'badge-secondary'} mr-1" style="background-color: ${cat.color || '#6B7280'}; color: white;">
              ${cat.name}
              ${cat.confidence ? `<span class="text-xs opacity-75">(${Math.round(cat.confidence * 100)}%)</span>` : ''}
            </span>`
          ).join('')
        : '<span class="badge badge-warning">Sin categoría</span>';
      
      return `
        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0">
              <div class="w-10 h-10 bg-twitter-600 rounded-full flex items-center justify-center">
                <span class="text-white font-medium">${tweet.authorUsername.charAt(0).toUpperCase()}</span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between mb-1">
                <div class="flex items-center space-x-2">
                  <span class="text-sm font-medium text-gray-900">@${tweet.authorUsername}</span>
                  <span class="text-sm text-gray-500">${timeAgo}</span>
                </div>
                <a href="https://twitter.com/${tweet.authorUsername}/status/${tweet.tweetId}" target="_blank" class="text-gray-400 hover:text-gray-600">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
              </div>
              <div class="mb-2">
                ${categoriesHtml}
              </div>
              <p class="text-sm text-gray-900 mb-2">${tweet.content}</p>
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4 text-sm text-gray-500">
                  <span>❤️ ${tweet.likeCount || 0}</span>
                  <span>🔄 ${tweet.retweetCount || 0}</span>
                  <span>💬 ${tweet.replyCount || 0}</span>
                </div>
                <div class="text-xs text-gray-400">
                  Guardado: ${new Date(tweet.bookmarkedAt).toLocaleDateString()}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  }
  
  // Sync functionality removed - now using Chrome extension
  
  // Initialize dashboard
  document.addEventListener('DOMContentLoaded', async () => {
    const isAuthenticated = await checkAuth();
    if (isAuthenticated) {
      loadDashboardData();
    }
  });
</script>
