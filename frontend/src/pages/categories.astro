---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Categorías - Twitter Archiver">
  <div class="px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Categorías</h1>
      <p class="mt-2 text-gray-600">Gestiona las categorías para organizar tus tweets.</p>
    </div>

    <!-- Add Category -->
    <div class="card mb-8">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Crear Nueva Categoría</h3>
      <form id="addCategoryForm" class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <div>
          <label for="categoryName" class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
          <input type="text" id="categoryName" placeholder="Ej: Tecnología" class="input" required>
        </div>
        
        <div>
          <label for="categoryDescription" class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
          <input type="text" id="categoryDescription" placeholder="Descripción opcional" class="input">
        </div>
        
        <div>
          <label for="categoryColor" class="block text-sm font-medium text-gray-700 mb-1">Color</label>
          <input type="color" id="categoryColor" value="#3B82F6" class="input h-10">
        </div>
        
        <div class="flex items-end">
          <button type="submit" class="btn-primary w-full">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Crear Categoría
          </button>
        </div>
      </form>
    </div>

    <!-- Categories List -->
    <div class="card">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Categorías Existentes</h3>
      <div id="categoriesContainer" class="space-y-4">
        <!-- Loading state -->
        <div id="loadingState" class="text-center py-12">
          <svg class="animate-spin mx-auto h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p class="mt-2 text-gray-500">Cargando categorías...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // API base URL
  const API_BASE = 'http://127.0.0.1:3001/';
  
  // Check authentication
  async function checkAuth() {
    const token = localStorage.getItem('authToken');
    if (!token) {
      window.location.href = '/';
      return false;
    }
    return true;
  }
  
  // Load categories
  async function loadCategories() {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    try {
      const response = await fetch(`${API_BASE}/categories`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        displayCategories(data.categories || []);
      } else {
        throw new Error('Error loading categories');
      }
    } catch (error) {
      console.error('Error:', error);
      document.getElementById('categoriesContainer').innerHTML = `
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
          <p class="mt-2 text-gray-500">Error cargando categorías</p>
        </div>
      `;
    } finally {
      document.getElementById('loadingState').style.display = 'none';
    }
  }
  
  // Display categories
  function displayCategories(categories) {
    const container = document.getElementById('categoriesContainer');
    
    if (!categories || categories.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
          </svg>
          <p class="mt-2 text-gray-500">No hay categorías creadas</p>
        </div>
      `;
      return;
    }
    
    container.innerHTML = categories.map(category => `
      <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:shadow-sm transition-shadow">
        <div class="flex items-center space-x-4">
          <div class="flex-shrink-0">
            <div class="w-8 h-8 rounded-full" style="background-color: ${category.color}"></div>
          </div>
          <div>
            <h4 class="text-sm font-medium text-gray-900">${category.name}</h4>
            <p class="text-sm text-gray-500">${category.description || 'Sin descripción'}</p>
          </div>
        </div>
        
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm font-medium text-gray-900">${category.tweetCount || 0} tweets</p>
            <p class="text-xs text-gray-500">${category.isDefault ? 'Categoría por defecto' : 'Personalizada'}</p>
          </div>
          
          <div class="flex items-center space-x-2">
            <button onclick="editCategory('${category.id}')" class="text-sm text-primary-600 hover:text-primary-800">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
            </button>
            
            ${!category.isDefault ? `
              <button onclick="deleteCategory('${category.id}')" class="text-sm text-red-600 hover:text-red-800">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    `).join('');
  }
  
  // Add category
  async function addCategory(event) {
    event.preventDefault();
    
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    const name = document.getElementById('categoryName').value.trim();
    const description = document.getElementById('categoryDescription').value.trim();
    const color = document.getElementById('categoryColor').value;
    
    if (!name) {
      alert('El nombre de la categoría es requerido');
      return;
    }
    
    try {
      const response = await fetch(`${API_BASE}/categories`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name,
          description,
          color
        })
      });
      
      if (response.ok) {
        // Reset form
        document.getElementById('addCategoryForm').reset();
        document.getElementById('categoryColor').value = '#3B82F6';
        
        // Reload categories
        loadCategories();
        
        alert('Categoría creada exitosamente');
      } else {
        const error = await response.json();
        alert(error.error || 'Error creando categoría');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error creando categoría');
    }
  }
  
  // Edit category
  async function editCategory(categoryId) {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    const newName = prompt('Nuevo nombre de la categoría:');
    if (!newName) return;
    
    const newDescription = prompt('Nueva descripción (opcional):');
    const newColor = prompt('Nuevo color (hex, opcional):', '#3B82F6');
    
    try {
      const response = await fetch(`${API_BASE}/categories/${categoryId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: newName,
          description: newDescription,
          color: newColor
        })
      });
      
      if (response.ok) {
        loadCategories();
        alert('Categoría actualizada exitosamente');
      } else {
        const error = await response.json();
        alert(error.error || 'Error actualizando categoría');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error actualizando categoría');
    }
  }
  
  // Delete category
  async function deleteCategory(categoryId) {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    if (!confirm('¿Estás seguro de que quieres eliminar esta categoría? Los tweets asociados se moverán a la categoría "General".')) {
      return;
    }
    
    try {
      const response = await fetch(`${API_BASE}/categories/${categoryId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        loadCategories();
        alert('Categoría eliminada exitosamente');
      } else {
        const error = await response.json();
        alert(error.error || 'Error eliminando categoría');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error eliminando categoría');
    }
  }
  
  // Event listeners
  document.getElementById('addCategoryForm')?.addEventListener('submit', addCategory);
  
  // Initialize page
  document.addEventListener('DOMContentLoaded', async () => {
    const isAuthenticated = await checkAuth();
    if (isAuthenticated) {
      loadCategories();
    }
  });
</script>
