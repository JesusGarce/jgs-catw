---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sincronizar - Twitter Archiver">
  <div class="px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Sincronizar Tweets</h1>
      <p class="mt-2 text-gray-600">Sincroniza tu timeline de Twitter para obtener los tweets más recientes.</p>
    </div>

    <!-- Sync Status -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-2 mb-8">
      <!-- Current Status -->
      <div class="card">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Estado Actual</h3>
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Última sincronización:</span>
            <span id="lastSync" class="text-sm font-medium text-gray-900">-</span>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Total de tweets:</span>
            <span id="totalTweets" class="text-sm font-medium text-gray-900">-</span>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Tweets nuevos:</span>
            <span id="newTweets" class="text-sm font-medium text-gray-900">-</span>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Estado:</span>
            <span id="syncStatus" class="badge badge-success">Listo</span>
          </div>
        </div>
      </div>

      <!-- Sync Controls -->
      <div class="card">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Controles de Sincronización</h3>
        <div class="space-y-4">
          <button id="syncNowBtn" class="btn-primary w-full">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Sincronizar Ahora
          </button>
          
          <div class="flex items-center space-x-2">
            <input type="checkbox" id="autoSync" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500">
            <label for="autoSync" class="text-sm text-gray-700">Sincronización automática</label>
          </div>
          
          <div class="text-xs text-gray-500">
            La sincronización automática se ejecuta cada 24 horas.
          </div>
        </div>
      </div>
    </div>

    <!-- Sync Progress -->
    <div id="syncProgress" class="card mb-8" style="display: none;">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Progreso de Sincronización</h3>
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Estado:</span>
          <span id="progressStatus" class="text-sm font-medium text-gray-900">Iniciando...</span>
        </div>
        
        <div class="w-full bg-gray-200 rounded-full h-2">
          <div id="progressBar" class="bg-primary-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
        
        <div class="flex items-center justify-between text-sm text-gray-600">
          <span id="progressText">Preparando sincronización...</span>
          <span id="progressPercent">0%</span>
        </div>
      </div>
    </div>

    <!-- Sync History -->
    <div class="card">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Historial de Sincronización</h3>
      <div id="syncHistory" class="space-y-3">
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="mt-2 text-gray-500">No hay historial de sincronización</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // API base URL
  const API_BASE = 'http://192.168.31.157:3001';
  
  // Check authentication
  async function checkAuth() {
    const token = localStorage.getItem('authToken');
    if (!token) {
      window.location.href = '/';
      return false;
    }
    return true;
  }
  
  // Load sync status
  async function loadSyncStatus() {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    try {
      const response = await fetch(`${API_BASE}/api/v1/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const stats = await response.json();
        
        document.getElementById('lastSync').textContent = stats.lastSync ? 
          new Date(stats.lastSync).toLocaleString() : 'Nunca';
        document.getElementById('totalTweets').textContent = stats.totalTweets || 0;
        document.getElementById('newTweets').textContent = stats.newTweets || 0;
        
        const statusElement = document.getElementById('syncStatus');
        if (stats.lastSync) {
          const lastSyncDate = new Date(stats.lastSync);
          const now = new Date();
          const hoursSinceSync = (now - lastSyncDate) / (1000 * 60 * 60);
          
          if (hoursSinceSync < 1) {
            statusElement.textContent = 'Reciente';
            statusElement.className = 'badge badge-success';
          } else if (hoursSinceSync < 24) {
            statusElement.textContent = 'Reciente';
            statusElement.className = 'badge badge-success';
          } else {
            statusElement.textContent = 'Desactualizado';
            statusElement.className = 'badge badge-warning';
          }
        } else {
          statusElement.textContent = 'Nunca sincronizado';
          statusElement.className = 'badge badge-error';
        }
      }
    } catch (error) {
      console.error('Error loading sync status:', error);
    }
  }
  
  // Load sync history
  async function loadSyncHistory() {
    const token = localStorage.getItem('authToken');
    if (!token) return;
    
    try {
      const response = await fetch(`${API_BASE}/api/v1/sync/history`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        displaySyncHistory(data.history || []);
      }
    } catch (error) {
      console.error('Error loading sync history:', error);
    }
  }
  
  // Display sync history
  function displaySyncHistory(history) {
    const container = document.getElementById('syncHistory');
    
    if (!history || history.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="mt-2 text-gray-500">No hay historial de sincronización</p>
        </div>
      `;
      return;
    }
    
    container.innerHTML = history.map(sync => `
      <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
        <div class="flex items-center space-x-3">
          <div class="flex-shrink-0">
            ${sync.status === 'success' ? 
              '<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>' :
              '<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>'
            }
          </div>
          <div>
            <p class="text-sm font-medium text-gray-900">
              ${sync.status === 'success' ? 'Sincronización exitosa' : 'Error en sincronización'}
            </p>
            <p class="text-xs text-gray-500">
              ${new Date(sync.startedAt).toLocaleString()}
            </p>
          </div>
        </div>
        <div class="text-right">
          <p class="text-sm text-gray-900">${sync.tweetsFound || 0} tweets</p>
          <p class="text-xs text-gray-500">${sync.duration ? Math.round(sync.duration / 1000) + 's' : '-'}</p>
        </div>
      </div>
    `).join('');
  }
  
  // Start sync
  async function startSync() {
    const token = localStorage.getItem('authToken');
    if (!token) {
      alert('Debes iniciar sesión primero');
      return;
    }
    
    const button = document.getElementById('syncNowBtn');
    const progressDiv = document.getElementById('syncProgress');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const progressPercent = document.getElementById('progressPercent');
    const progressStatus = document.getElementById('progressStatus');
    
    try {
      // Show progress
      progressDiv.style.display = 'block';
      button.disabled = true;
      button.innerHTML = `
        <svg class="animate-spin w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sincronizando...
      `;
      
      // Update progress
      progressStatus.textContent = 'Iniciando sincronización...';
      progressText.textContent = 'Conectando con Twitter...';
      progressBar.style.width = '10%';
      progressPercent.textContent = '10%';
      
      // Start sync
      const response = await fetch(`${API_BASE}/api/v1/sync`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // Update progress to completion
        progressBar.style.width = '100%';
        progressPercent.textContent = '100%';
        progressStatus.textContent = 'Completado';
        progressText.textContent = `Sincronización completada. ${result.newTweets} tweets nuevos.`;
        
        // Reload data
        setTimeout(() => {
          loadSyncStatus();
          loadSyncHistory();
        }, 1000);
        
      } else {
        throw new Error('Error en la sincronización');
      }
      
    } catch (error) {
      console.error('Error:', error);
      progressStatus.textContent = 'Error';
      progressText.textContent = 'Error durante la sincronización';
      progressBar.style.width = '100%';
      progressBar.className = 'bg-red-600 h-2 rounded-full transition-all duration-300';
      progressPercent.textContent = 'Error';
    } finally {
      // Reset button
      setTimeout(() => {
        button.disabled = false;
        button.innerHTML = `
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Sincronizar Ahora
        `;
        
        // Hide progress after delay
        setTimeout(() => {
          progressDiv.style.display = 'none';
          progressBar.className = 'bg-primary-600 h-2 rounded-full transition-all duration-300';
        }, 3000);
      }, 2000);
    }
  }
  
  // Event listeners
  document.getElementById('syncNowBtn')?.addEventListener('click', startSync);
  
  // Initialize page
  document.addEventListener('DOMContentLoaded', async () => {
    const isAuthenticated = await checkAuth();
    if (isAuthenticated) {
      loadSyncStatus();
      loadSyncHistory();
    }
  });
</script>
