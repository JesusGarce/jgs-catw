import cron from 'node-cron';
import { logger } from '../utils/logger.js';
import { syncAllUsers } from './syncBookmarks.js';

export function startScheduledJobs() {
  logger.info('üìÖ Iniciando trabajos programados...');

  // Sincronizaci√≥n diaria de bookmarks - 9:00 AM todos los d√≠as
  const syncSchedule = process.env.SYNC_SCHEDULE_CRON || '0 9 * * *';
  
  cron.schedule(syncSchedule, async () => {
    logger.info('üîÑ Iniciando sincronizaci√≥n programada de todos los usuarios');
    
    try {
      await syncAllUsers();
      logger.info('‚úÖ Sincronizaci√≥n programada completada exitosamente');
    } catch (error) {
      logger.error('‚ùå Error en sincronizaci√≥n programada:', error);
    }
  }, {
    scheduled: true,
    timezone: "Europe/Madrid" // Ajustar seg√∫n tu zona horaria
  });

  // Job de limpieza semanal - Domingos a las 2:00 AM
  cron.schedule('0 2 * * 0', async () => {
    logger.info('üßπ Iniciando limpieza semanal');
    
    try {
      await cleanupOldLogs();
      logger.info('‚úÖ Limpieza semanal completada');
    } catch (error) {
      logger.error('‚ùå Error en limpieza semanal:', error);
    }
  }, {
    scheduled: true,
    timezone: "Europe/Madrid"
  });

  // Job de mantenimiento mensual - Primer d√≠a del mes a las 1:00 AM
  cron.schedule('0 1 1 * *', async () => {
    logger.info('üîß Iniciando mantenimiento mensual');
    
    try {
      await monthlyMaintenance();
      logger.info('‚úÖ Mantenimiento mensual completado');
    } catch (error) {
      logger.error('‚ùå Error en mantenimiento mensual:', error);
    }
  }, {
    scheduled: true,
    timezone: "Europe/Madrid"
  });

  logger.info(`üìÖ Trabajos programados configurados:`);
  logger.info(`   ‚Ä¢ Sincronizaci√≥n diaria: ${syncSchedule}`);
  logger.info(`   ‚Ä¢ Limpieza semanal: Domingos 2:00 AM`);
  logger.info(`   ‚Ä¢ Mantenimiento mensual: 1er d√≠a del mes 1:00 AM`);
}

async function cleanupOldLogs() {
  const { PrismaClient } = await import('@prisma/client');
  const prisma = new PrismaClient();
  
  try {
    // Eliminar logs de sincronizaci√≥n m√°s antiguos que 30 d√≠as
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const deletedLogs = await prisma.syncLog.deleteMany({
      where: {
        startedAt: {
          lt: thirtyDaysAgo
        }
      }
    });
    
    logger.info(`üóëÔ∏è Eliminados ${deletedLogs.count} logs antiguos de sincronizaci√≥n`);
    
  } catch (error) {
    logger.error('Error en limpieza de logs:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

async function monthlyMaintenance() {
  const { PrismaClient } = await import('@prisma/client');
  const prisma = new PrismaClient();
  
  try {
    // Actualizar contadores de tweets en categor√≠as
    const categories = await prisma.category.findMany();
    
    for (const category of categories) {
      const tweetCount = await prisma.tweet.count({
        where: {
          userId: category.userId,
          category: category.name,
          isArchived: false
        }
      });
      
      await prisma.category.update({
        where: { id: category.id },
        data: { tweetCount }
      });
    }
    
    logger.info(`üî¢ Actualizados contadores de ${categories.length} categor√≠as`);
    
    // Identificar usuarios inactivos (sin sync en 30 d√≠as)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const inactiveUsers = await prisma.user.count({
      where: {
        OR: [
          { lastSync: { lt: thirtyDaysAgo } },
          { lastSync: null }
        ],
        isActive: true
      }
    });
    
    logger.info(`‚ö†Ô∏è Usuarios inactivos detectados: ${inactiveUsers}`);
    
  } catch (error) {
    logger.error('Error en mantenimiento mensual:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}